{"version":3,"file":"sdk.esm.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | number | string\n\nexport enum ChainId {\n  MAINNET = 56,\n  TESTNET = 97,\n  ROBURNA = 159\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum PairType {\n  INTERNAL,\n  EXTERNAL\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\nexport const FACTORY_ADDRESS = '0x0de73FE9d848A68Aba41c3edcd2C69301a7f4573'\nexport const FACTORY_ADDRESS_EXTERNAL = '0xD3c5FF3f6C4E9Aa876E563f4cb04d3020CFC8Ad9'\nexport const FACTORY_ADDRESS_ROBURNA = '0x0de73FE9d848A68Aba41c3edcd2C69301a7f4573'\n\nexport const FACTORY_ADDRESS_MAP = {\n  [ChainId.MAINNET]: FACTORY_ADDRESS,\n  [ChainId.TESTNET]: FACTORY_ADDRESS,\n  [ChainId.ROBURNA]: FACTORY_ADDRESS_ROBURNA\n}\n\nexport const EXTERNAL_FACTORY_ADDRESS_MAP = {\n  [ChainId.MAINNET]: FACTORY_ADDRESS_EXTERNAL,\n  [ChainId.TESTNET]: FACTORY_ADDRESS_EXTERNAL,\n  [ChainId.ROBURNA]: FACTORY_ADDRESS_EXTERNAL\n}\n\nexport const INIT_CODE_HASH = '0x2e26c6a371cb994ce7b30f334480a5782dff687140d5608ced830fc138a0ed7b'\nexport const INIT_CODE_HASH_EXTERNAL = '0xc1356d02a24c59f29ae5ee0746a3c82345d8817f2dc7e93b56110d5690e5f242'\nexport const INIT_CODE_HASH_ROBURNA = '0x2e26c6a371cb994ce7b30f334480a5782dff687140d5608ced830fc138a0ed7b'\n\nexport const INIT_CODE_HASH_MAP = {\n  [ChainId.MAINNET]: INIT_CODE_HASH,\n  [ChainId.TESTNET]: INIT_CODE_HASH,\n  [ChainId.ROBURNA]: INIT_CODE_HASH_ROBURNA\n}\n\nexport const EXTERNAL_CODE_HASH_MAP = {\n  [ChainId.MAINNET]: INIT_CODE_HASH_EXTERNAL,\n  [ChainId.TESTNET]: INIT_CODE_HASH_EXTERNAL,\n  [ChainId.ROBURNA]: INIT_CODE_HASH_EXTERNAL\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const FEES_NUMERATOR = JSBI.BigInt(9975)\nexport const FEES_DENOMINATOR = JSBI.BigInt(10000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI ? bigintIsh : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'RBA', 'RBA')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n  public readonly projectLink?: string\n\n  public constructor(\n    chainId: ChainId,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    projectLink?: string\n  ) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n    this.projectLink = projectLink\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.TESTNET]: new Token(\n    ChainId.TESTNET,\n    '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.ROBURNA]: new Token(\n    ChainId.ROBURNA,\n    '0x238F5666A0f12c571B7B3fBd5b5a434146dFa0C5',\n    18,\n    'WRBA',\n    'Wrapped RBA',\n    'https://www.roburna.com'\n  )\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS_MAP,\n  INIT_CODE_HASH_MAP,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  FEES_NUMERATOR,\n  FEES_DENOMINATOR,\n  ChainId,\n  PairType,\n  EXTERNAL_FACTORY_ADDRESS_MAP,\n  EXTERNAL_CODE_HASH_MAP\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [key: string]: string } = {}\n\nconst composeKey = (token0: Token, token1: Token, type: PairType = PairType.INTERNAL) =>\n  `${type}-${token0.chainId}-${token0.address}-${token1.address}`\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  public readonly pairType: PairType\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    const key = composeKey(token0, token1, PairType.INTERNAL)\n\n    if (PAIR_ADDRESS_CACHE?.[key] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [key]: getCreate2Address(\n          FACTORY_ADDRESS_MAP[token0.chainId],\n          keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n          INIT_CODE_HASH_MAP[token0.chainId]\n        )\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[key]\n  }\n\n  public static getAddressEx(tokenA: Token, tokenB: Token): string {\n    const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    const key = composeKey(token0, token1, PairType.EXTERNAL)\n\n    if (PAIR_ADDRESS_CACHE?.[key] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [key]: getCreate2Address(\n          EXTERNAL_FACTORY_ADDRESS_MAP[token0.chainId],\n          keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n          EXTERNAL_CODE_HASH_MAP[token0.chainId]\n        )\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[key]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount, pairType: PairType = PairType.INTERNAL) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    if (pairType === PairType.INTERNAL) {\n      this.liquidityToken = new Token(\n        tokenAmounts[0].token.chainId,\n        Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n        18,\n        'Arbor-LPs',\n        'Arbor LPs'\n      )\n    } else {\n      this.liquidityToken = new Token(\n        tokenAmounts[0].token.chainId,\n        Pair.getAddressEx(tokenAmounts[0].token, tokenAmounts[1].token),\n        18,\n        'Arbor-LPs',\n        'Arbor LPs'\n      )\n    }\n\n    this.pairType = pairType\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, FEES_NUMERATOR)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, FEES_DENOMINATOR), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), FEES_DENOMINATOR)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), FEES_NUMERATOR)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '..'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if ((error as InsufficientInputAmountError).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: any[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if ((error as InsufficientReservesError).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType, PairType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Pancake Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Pancake Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Pancake Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    const pairType = trade.route.pairs[0].pairType\n\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = pairType == PairType.INTERNAL ? 'swapExactETHForTokens' : 'swapExactETHForTokensEx'\n          // (address token, uint amountOutMin, address to, uint deadline)\n          args = [path[1], amountOut, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = pairType == PairType.INTERNAL ? 'swapExactTokenForETH' : 'swapExactTokenForETHEx'\n          // (address token, uint amountIn, uint amountOutMin, address to, uint deadline)\n          args = [path[0], amountIn, amountOut, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = pairType == PairType.INTERNAL ? 'swapExactTokensForTokens' : 'swapExactTokensForTokensEx'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          // (address tokenA, address tokenB, uint amountIn, uint amountOutMin, address to, uint deadline)\n          args = [path[0], path[path.length - 1], amountIn, amountOut, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = pairType == PairType.INTERNAL ? 'swapETHForExactTokens' : 'swapETHForExactTokensEx'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [path[1], amountOut, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = pairType == PairType.INTERNAL ? 'swapTokensForExactETH' : 'swapTokensForExactETHEx'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [path[0], amountIn, amountOut, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = pairType == PairType.INTERNAL ? 'swapTokensForExactTokens' : 'swapTokensForExactTokensEx'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [path[0], path[path.length - 1], amountIn, amountOut, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IArborSwapPair from './abis/IArborSwapPair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IArborSwapPair, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","TradeType","PairType","Rounding","FACTORY_ADDRESS","FACTORY_ADDRESS_EXTERNAL","FACTORY_ADDRESS_ROBURNA","FACTORY_ADDRESS_MAP","MAINNET","TESTNET","ROBURNA","EXTERNAL_FACTORY_ADDRESS_MAP","INIT_CODE_HASH","INIT_CODE_HASH_EXTERNAL","INIT_CODE_HASH_ROBURNA","INIT_CODE_HASH_MAP","EXTERNAL_CODE_HASH_MAP","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","FEES_NUMERATOR","FEES_DENOMINATOR","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","ETHER","Token","chainId","projectLink","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","PAIR_ADDRESS_CACHE","composeKey","token1","type","INTERNAL","Pair","tokenAmountA","tokenAmountB","pairType","tokenAmounts","liquidityToken","getAddressEx","tokenA","tokenB","key","undefined","getCreate2Address","keccak256","pack","EXTERNAL","involvesToken","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextPairs","EXACT_INPUT","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","then","fetchPairData","IArborSwapPair","getReserves","reserves0","reserves1","balances"],"mappings":"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"}