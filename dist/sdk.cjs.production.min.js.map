{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | number | string\n\nexport enum ChainId {\n  MAINNET = 56,\n  TESTNET = 97,\n  ROBURNA = 159\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum PairType {\n  INTERNAL,\n  EXTERNAL\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\nexport const FACTORY_ADDRESS = '0x0de73FE9d848A68Aba41c3edcd2C69301a7f4573'\nexport const FACTORY_ADDRESS_EXTERNAL = '0xD3c5FF3f6C4E9Aa876E563f4cb04d3020CFC8Ad9'\nexport const FACTORY_ADDRESS_ROBURNA = '0x0de73FE9d848A68Aba41c3edcd2C69301a7f4573'\n\nexport const FACTORY_ADDRESS_MAP = {\n  [ChainId.MAINNET]: FACTORY_ADDRESS,\n  [ChainId.TESTNET]: FACTORY_ADDRESS,\n  [ChainId.ROBURNA]: FACTORY_ADDRESS_ROBURNA\n}\n\nexport const EXTERNAL_FACTORY_ADDRESS_MAP = {\n  [ChainId.MAINNET]: FACTORY_ADDRESS_EXTERNAL,\n  [ChainId.TESTNET]: FACTORY_ADDRESS_EXTERNAL,\n  [ChainId.ROBURNA]: FACTORY_ADDRESS_EXTERNAL\n}\n\nexport const INIT_CODE_HASH = '0x2e26c6a371cb994ce7b30f334480a5782dff687140d5608ced830fc138a0ed7b'\nexport const INIT_CODE_HASH_EXTERNAL = '0xc1356d02a24c59f29ae5ee0746a3c82345d8817f2dc7e93b56110d5690e5f242'\nexport const INIT_CODE_HASH_ROBURNA = '0x2e26c6a371cb994ce7b30f334480a5782dff687140d5608ced830fc138a0ed7b'\n\nexport const INIT_CODE_HASH_MAP = {\n  [ChainId.MAINNET]: INIT_CODE_HASH,\n  [ChainId.TESTNET]: INIT_CODE_HASH,\n  [ChainId.ROBURNA]: INIT_CODE_HASH_ROBURNA\n}\n\nexport const EXTERNAL_CODE_HASH_MAP = {\n  [ChainId.MAINNET]: INIT_CODE_HASH_EXTERNAL,\n  [ChainId.TESTNET]: INIT_CODE_HASH_EXTERNAL,\n  [ChainId.ROBURNA]: INIT_CODE_HASH_EXTERNAL\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const FEES_NUMERATOR = JSBI.BigInt(9975)\nexport const FEES_DENOMINATOR = JSBI.BigInt(10000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI ? bigintIsh : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'RBA', 'RBA')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n  public readonly projectLink?: string\n\n  public constructor(\n    chainId: ChainId,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    projectLink?: string\n  ) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n    this.projectLink = projectLink\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.TESTNET]: new Token(\n    ChainId.TESTNET,\n    '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.ROBURNA]: new Token(\n    ChainId.ROBURNA,\n    '0x238F5666A0f12c571B7B3fBd5b5a434146dFa0C5',\n    18,\n    'WRBA',\n    'Wrapped RBA',\n    'https://www.roburna.com'\n  )\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS_MAP,\n  INIT_CODE_HASH_MAP,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  FEES_NUMERATOR,\n  FEES_DENOMINATOR,\n  ChainId,\n  PairType,\n  EXTERNAL_FACTORY_ADDRESS_MAP,\n  EXTERNAL_CODE_HASH_MAP\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [key: string]: string } = {}\n\nconst composeKey = (token0: Token, token1: Token, type: PairType = PairType.INTERNAL) =>\n  `${type}-${token0.chainId}-${token0.address}-${token1.address}`\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  public readonly pairType: PairType\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    const key = composeKey(token0, token1, PairType.INTERNAL)\n\n    if (PAIR_ADDRESS_CACHE?.[key] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [key]: getCreate2Address(\n          FACTORY_ADDRESS_MAP[token0.chainId],\n          keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n          INIT_CODE_HASH_MAP[token0.chainId]\n        )\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[key]\n  }\n\n  public static getAddressEx(tokenA: Token, tokenB: Token): string {\n    const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    const key = composeKey(token0, token1, PairType.EXTERNAL)\n\n    if (PAIR_ADDRESS_CACHE?.[key] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [key]: getCreate2Address(\n          EXTERNAL_FACTORY_ADDRESS_MAP[token0.chainId],\n          keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n          EXTERNAL_CODE_HASH_MAP[token0.chainId]\n        )\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[key]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount, pairType: PairType = PairType.INTERNAL) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    if (pairType === PairType.INTERNAL) {\n      this.liquidityToken = new Token(\n        tokenAmounts[0].token.chainId,\n        Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n        18,\n        'Arbor-LPs',\n        'Arbor LPs'\n      )\n    } else {\n      this.liquidityToken = new Token(\n        tokenAmounts[0].token.chainId,\n        Pair.getAddressEx(tokenAmounts[0].token, tokenAmounts[1].token),\n        18,\n        'Arbor-LPs',\n        'Arbor LPs'\n      )\n    }\n\n    this.pairType = pairType\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, FEES_NUMERATOR)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, FEES_DENOMINATOR), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), FEES_DENOMINATOR)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), FEES_NUMERATOR)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '..'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if ((error as InsufficientInputAmountError).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: any[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if ((error as InsufficientReservesError).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType, PairType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Pancake Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Pancake Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Pancake Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    const pairType = trade.route.pairs[0].pairType\n\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = pairType == PairType.INTERNAL ? 'swapExactETHForTokens' : 'swapExactETHForTokensEx'\n          // (address token, uint amountOutMin, address to, uint deadline)\n          args = [path[1], amountOut, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = pairType == PairType.INTERNAL ? 'swapExactTokenForETH' : 'swapExactTokenForETHEx'\n          // (address token, uint amountIn, uint amountOutMin, address to, uint deadline)\n          args = [path[0], amountIn, amountOut, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = pairType == PairType.INTERNAL ? 'swapExactTokensForTokens' : 'swapExactTokensForTokensEx'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          // (address tokenA, address tokenB, uint amountIn, uint amountOutMin, address to, uint deadline)\n          args = [path[0], path[1], amountIn, amountOut, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = pairType == PairType.INTERNAL ? 'swapETHForExactTokens' : 'swapETHForExactTokensEx'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [path[1], amountOut, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = pairType == PairType.INTERNAL ? 'swapTokensForExactETH' : 'swapTokensForExactETHEx'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [path[0], amountIn, amountOut, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = pairType == PairType.INTERNAL ? 'swapTokensForExactTokens' : 'swapTokensForExactTokensEx'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [path[0], path[1], amountIn, amountOut, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IArborSwapPair from './abis/IArborSwapPair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IArborSwapPair, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","TradeType","PairType","Rounding","SolidityType","FACTORY_ADDRESS","FACTORY_ADDRESS_MAP","MAINNET","TESTNET","ROBURNA","EXTERNAL_FACTORY_ADDRESS_MAP","INIT_CODE_HASH","INIT_CODE_HASH_EXTERNAL","INIT_CODE_HASH_MAP","EXTERNAL_CODE_HASH_MAP","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","FEES_NUMERATOR","FEES_DENOMINATOR","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","ETHER","Token","chainId","projectLink","equals","other","this","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","PAIR_ADDRESS_CACHE","composeKey","token1","type","INTERNAL","Pair","tokenAmountA","tokenAmountB","pairType","tokenAmounts","liquidityToken","getAddressEx","tokenA","tokenB","key","undefined","getCreate2Address","keccak256","pack","EXTERNAL","involvesToken","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","i","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","fetchPairData","IArborSwapPair","getReserves","reserves0","reserves1","balances"],"mappings":"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"}